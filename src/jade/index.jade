doctype html
html
  head
    meta(charset='UTF-8')
    title Swift First Step
    meta(name='viewport', content='width=device-width, initial-scale=1')
    link(rel='stylesheet', href='css/highlight.pack.css')
    link(rel="stylesheet", href='https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css')
    link(rel='stylesheet', href='css/app.css')

  body

    .container

        section
            .playground-header
                h2.main-title Swift Seminar

        section.env.mb20
            h2.env-title 実行環境
            | OS X El Capitan 10.11.5 <br> Xcode 8.0 beta(8S128d)

        h3.play-title Seminar1

        p.mb10 ※各Stepのプログラムは
            a(href="https://github.com/code0-sh/SwiftSeminarProgram", target="blank") こちら
            | にあります。

        section.playground
            .play-list
                .play-list-item
                    .step-header
                        .step-num <i class="fa fa-plus-square"></i> Step1:プロジェクト作成
                    .play-code
                        ul.guidance
                            li Xcodeを起動し、<i class="marker highlight">Create a new Xcode project</i>を選択する。
                            img(src="images/step1_xcode_01.png", width="50%")

                            li <i class="marker highlight">Game</i>を選択して<i class="marker highlight">Next</i>を押下する。
                            img(src="images/step1_xcode_02.png", width="50%")

                            li アプリ名、組織名は任意のものを入れて<i class="marker highlight">Next</i>を押下する。
                            img(src="images/step1_xcode_03.png", width="50%")

                            li 任意のディレクトリを選択して<i class="marker highlight">Next</i>を押下する。
                            img(src="images/step1_xcode_04.png", width="50%")

            .play-list
                .play-list-item
                    .step-header
                        .step-num <i class="fa fa-plus-square"></i> Step2:プロジェクト初期化
                    .play-code
                        ul.guidance
                            li sksファイル(Actions.sks, GameScene.sks)を削除する。

                            li GameScene.swift : GameSceneの中身を空にする。
                                include:markdown ../md/Step2/1.md

                            li GameViewController.swift : viewDidLoadを以下に変更する。
                                include:markdown ../md/Step2/2.md

            .play-list
                .play-list-item
                    .step-header
                        .step-num <i class="fa fa-plus-square"></i> Step3: 文字を表示する
                    .play-code
                        dl.learn
                            dt.learn-title 習得事項
                            dd.learn-contents SKLabelNodeを使って文字を表示できる。

                        dl.subject.mb10
                            dt.subject-title 課題
                            dd.subject-contents
                                .mb10
                                    span SKLabelNodeを使って文字列「Hello, SpriteKit」を表示する。
                                ul.ml20
                                    li フォント名 Chalkduster
                                    li 文字サイズ 30
                                    li 文字色 green
                                    li 文字の位置 画面の中心

                        button.answerBtn.mb10 解答例

                        .answer.hidden
                            include:markdown ../md/Step3/1.md

            .play-list
                .play-list-item
                    .step-header
                        .step-num <i class="fa fa-plus-square"></i> Step4: 画像を表示する
                    .play-code
                        dl.learn
                            dt.learn-title 習得事項
                            dd.learn-contents SKSpriteNode、SKTextureを使って画像を表示できる。

                        dl.subject.mb10
                            dt.subject-title 課題
                            dd.subject-contents
                                .mb10
                                    span 画像を表示変更する。
                                ol.ml20
                                    li SKSpriteNodeを使って画像を表示する。
                                    li SKTextureを使って画像を変更する。

                        button.answerBtn.mb10 解答例

                        .answer.hidden
                            ul.guidance
                                li Assets.xcassetsに画像ファイル(person.png)をドラッグアンドドロップする。
                                img(src="images/step4_xcode_01.png", width="50%")

                                include:markdown ../md/Step4/1.md

                                li Assets.xcassetsに画像ファイル(airplane.png)をドラッグアンドドロップする。
                                img(src="images/step4_xcode_02.png", width="50%")

                                include:markdown ../md/Step4/2.md

            .play-list
                .play-list-item
                    .step-header
                        .step-num <i class="fa fa-plus-square"></i> Step5: アニメーション
                    .play-code
                        dl.learn
                            dt.learn-title 習得事項
                            dd.learn-contents SKActionを使ったアニメーションができる。
                        dl.subject.mb10
                            dt.subject-title 課題
                            dd.subject-contents.mb10
                                .mb10
                                    span SKActionを使って対象物にアニメーションを付ける。
                                ol.ml20
                                    li SKSpriteNodeを使用しアニメーションの対象物を生成する。
                                    li 対象物を配置する。
                                    li SKActionを使用しアニメーションを作成する。
                                    li 作成したアニメーションを対象物に設定する。

                            dt.subject-title 補足事項
                            dd.subject-contents 対象物はbackground.pngを使用するためAssets.xcassetsに画像ファイル(background.png)をドラッグアンドドロップする。
                                img(src="images/step5_xcode_01.png", width="50%")

                        button.answerBtn.mb10 解答例

                        .answer.hidden

                            ul.guidance
                                li
                                    include:markdown ../md/Step5/1.md

            .play-list
                .play-list-item
                    .step-header
                        .step-num <i class="fa fa-plus-square"></i> Step6: 物理空間の生成と衝突
                    .play-code
                        dl.learn
                            dt.learn-title 習得事項
                            dd.learn-contents physicsWorld、SKPhysicsBodyを使って物理空間を生成し、衝突イベントを設定できる。
                        dl.subject.mb10
                            dt.subject-title 課題
                            dd.subject-contents.mb10
                                .mb10
                                    span physicsWorld、physicsBody、SKPhysicsBodyを使って物理空間を生成し、他物体との衝突イベントを生じさせる。衝突時に一方を消す。
                                ol.ml20
                                    li SKSpriteNodeを使用し対象物を生成する。
                                    li 対象物をランダムに配置する。
                                    li physicsWorld、physicsBody、SKPhysicsBodyを使って物理空間を生成する。
                                    li 衝突イベントを設定する。

                            dt.subject-title 補足事項
                            dd.subject-contents 対象物はenemy.pngを使用するためAssets.xcassetsに画像ファイル(enemy.png)をドラッグアンドドロップする。
                                img(src="images/step6_xcode_01.png", width="50%")

                        button.answerBtn.mb10 ヒント

                        .answer.hidden
                            ul.guidance
                                li 衝突判定用のビット値の定義
                                    include:markdown ../md/Step6/1.md
                                li 対象物の生成と配置
                                    include:markdown ../md/Step6/2.md
                                li Sceneの物理設定
                                    include:markdown ../md/Step6/3.md
                                li 対象物の物理設定
                                    include:markdown ../md/Step6/4.md
                                li 衝突時のイベント
                                    include:markdown ../md/Step6/5.md

            .play-list
                .play-list-item
                    .step-header
                        .step-num <i class="fa fa-plus-square"></i> Step7: タップ
                    .play-code
                        dl.learn
                            dt.learn-title 習得事項
                            dd.learn-contents タップイベントを設定できる。
                        dl.subject.mb10
                            dt.subject-title 課題
                            dd.subject-contents
                                .mb10
                                    span タップすると飛行機がタップ位置に移動する。ダブルタップの場合移動後に弾丸を発射する。
                                ol.ml20
                                    li SKSpriteNodeを使用し飛行機を生成し配置する。
                                    li タップ開始イベントを設定する。
                                    li タップ終了イベントを設定する。
                                    li SKShapeNodeを使用し弾丸をタップ位置に生成し、アニメーションを設定する。

                        button.answerBtn.mb10 ヒント

                        .answer.hidden
                            ul.guidance
                                li タップ開始イベント
                                    include:markdown ../md/Step7/1.md
                                li タップイベント
                                    include:markdown ../md/Step7/2.md
                                li SKShapeNodeを使用した弾丸の生成
                                    include:markdown ../md/Step7/3.md

    #react


    script(src='js/react-with-addons-0.13.1.js')
    script(src='js/bundle.js')
    script(src='js/highlight.pack.js')
    script(type="text/javascript").
        hljs.initHighlightingOnLoad();
